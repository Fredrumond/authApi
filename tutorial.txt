- Criar um projeto normal

- Instalar o passaport

composer require laravel/passport

- Rodar o migration

php artisan migrate

- Instalação e geração das chaves


Este comando criará as chaves de criptografia necessárias para gerar os tokens de acesso. Além disso, o comando criará o "personal access" e a "password grant" dos clientes que serão usados ​​para gerar os tokens de acesso.

php artisan passport:install

resultado do comando: 

Encryption keys generated successfully.
Personal access client created successfully.
Client ID: 1
Client secret: SZ60iZyFoNGMp6vvxTnRzSQPZxzFTpSkz4JJWSSh
Password grant client created successfully.
Client ID: 2
Client secret: c0Uvp6N8R1T102nYoCS7uBAyyNySdLvG7iyVi5lF

- Configurar Passaport

Em App\User colocar:

use Laravel\Passport\HasApiTokens;
use HasApiTokens, Notifiable;

Em app/Providers/AuthServiceProvider colocar:


use Laravel\Passport\Passport;

public function boot()
    {
        $this->registerPolicies();

        Passport::routes();
    }

Em config/auth.php


Para terminar no seu arquivo de configuração, você deve ajustar a opção do driver de autenticação da API nos 'guards' para o Passaport. Isso instruirá seu aplicativo a usar o Passport TokenGuard ao autenticar as solicitações recebidas da API

'guards' => [
    'web' => [
        'driver' => 'session',
        'provider' => 'users',
    ],

    'api' => [
        'driver' => 'passport',
        'provider' => 'users',
    ],
],


- Criação das rotas da API

Em routes/api.php

Route::group(['prefix' => 'auth'], function () {
    Route::post('login', 'AuthController@login');
    Route::post('signup', 'AuthController@signup');
  
    Route::group(['middleware' => 'auth:api'], function() {
        Route::get('logout', 'AuthController@logout');
        Route::get('user', 'AuthController@user');
    });
});

- Criar controller para autenticação

use App\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

public function signup(Request $request)
    {
        $request->validate([
            'name'     => 'required|string',
            'email'    => 'required|string|email|unique:users',
            'password' => 'required|string|confirmed',
        ]);
        $user = new User([
            'name'     => $request->name,
            'email'    => $request->email,
            'password' => bcrypt($request->password),
        ]);
        $user->save();
        return response()->json([
            'message' => 'Successfully created user!'], 201);
    }
    public function login(Request $request)
    {
        $request->validate([
            'email'       => 'required|string|email',
            'password'    => 'required|string',
            'remember_me' => 'boolean',
        ]);
        $credentials = request(['email', 'password']);
        if (!Auth::attempt($credentials)) {
            return response()->json([
                'message' => 'Unauthorized'], 401);
        }
        $user = $request->user();
        $tokenResult = $user->createToken('Personal Access Token');
        $token = $tokenResult->token;
        if ($request->remember_me) {
            $token->expires_at = Carbon::now()->addWeeks(1);
        }
        $token->save();
        return response()->json([
            'access_token' => $tokenResult->accessToken,
            'token_type'   => 'Bearer',
            'expires_at'   => Carbon::parse(
                $tokenResult->token->expires_at)
                    ->toDateTimeString(),
        ]);
    }

    public function logout(Request $request)
    {
        $request->user()->token()->revoke();
        return response()->json(['message' => 
            'Successfully logged out']);
    }

    public function user(Request $request)
    {
        return response()->json($request->user());
    }